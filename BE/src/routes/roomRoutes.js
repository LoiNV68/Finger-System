const express = require("express");
const Room = require("../models/Room");
const { v4: uuidv4 } = require("uuid"); // S·ª≠ d·ª•ng ƒë·ªÉ t·∫°o deviceId duy nh·∫•t

const router = express.Router();

// üè† L·∫•y danh s√°ch ph√≤ng
router.get("/", async (req, res) => {
  try {
    const rooms = await Room.find();
    res.json(rooms);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üÜï T·∫°o ph√≤ng m·ªõi
router.post("/create", async (req, res) => {
  try {
    const { name, floor, deviceName, status } = req.body;

    // Ki·ªÉm tra xem t√™n ph√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingRoom = await Room.findOne({ name });
    if (existingRoom) {
      return res.status(400).json({ error: "T√™n ph√≤ng ƒë√£ t·ªìn t·∫°i" });
    }

    const room = new Room({
      deviceId: uuidv4(), // T·∫°o deviceId duy nh·∫•t
      name,
      floor,
      deviceName: deviceName || undefined,
      status: status || (deviceName ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng c√≥ thi·∫øt b·ªã"), // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i d·ª±a tr√™n deviceName
    });

    await room.save();
    res.status(201).json(room);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// üîÑ C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
router.put("/update/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, floor, deviceName, status, resetDeviceId } = req.body;

    // Ki·ªÉm tra tr√πng t√™n ph√≤ng (tr·ª´ ph√≤ng hi·ªán t·∫°i)
    const existingRoom = await Room.findOne({ name, _id: { $ne: id } });
    if (existingRoom) {
      return res.status(400).json({ error: "T√™n ph√≤ng ƒë√£ t·ªìn t·∫°i" });
    }

    const updatedData = {
      name,
      floor,
      deviceName: deviceName || undefined,
      status,
    };

    // N·∫øu c√≥ y√™u c·∫ßu reset deviceId
    if (resetDeviceId) {
      updatedData.deviceId = uuidv4();
    }

    const updatedRoom = await Room.findByIdAndUpdate(id, updatedData, {
      new: true,
    });
    if (!updatedRoom) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    }

    res.json(updatedRoom);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// üóëÔ∏è X√≥a ph√≤ng h·ªçc
router.delete("/delete/:id", async (req, res) => {
  try {
    const room = await Room.findByIdAndDelete(req.params.id);
    if (!room) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    }
    res.json({ message: "X√≥a ph√≤ng th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üîç L·∫•y ph√≤ng theo deviceId
router.get("/get-by-device", async (req, res) => {
  try {
    const { deviceId } = req.query;
    const room = await Room.findOne({ deviceId });
    if (!room) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    res.json({ roomId: room._id });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
